{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NA4FeA,MAzFf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,0CACA,kDAEF,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,WACb,uCACA,mDACA,6CACA,0CAEF,yBAAKA,UAAU,UACb,sCACA,4BACE,oCACA,gDACA,uCAGJ,yBAAKA,UAAU,aACb,yCACA,6CACA,uDAGJ,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,cACb,0CACA,kJACA,4BACE,sGACA,kGAEF,oJACA,4BACE,mHACA,oGAEF,mIACA,4BACE,mIACA,4GAEF,8HACA,4BACE,kHACA,oHAEF,wHACA,4BACE,uHACA,wHAEF,wHACA,4BACE,yHACA,oHAEF,0HACA,4BACE,iHACA,iGAEF,4GACA,4BACE,+FACA,oGAEF,kGACA,4BACE,sLACA,+GAEF,6GACA,4BACE,2GACA,oHCvEMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b8689b2d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <h1>Diana Tran</h1>\n        <h2>Software Engineer</h2>\n      </div>\n      <div className=\"column-container\">\n        <div className=\"column left-column\">\n          <div className=\"contact\">\n            <h2>Contact</h2>\n            <p>trandianat@gmail.com</p>\n            <p>(781) 632-5228</p>\n            <p>Boston, MA</p>\n          </div>\n          <div className=\"skills\">\n            <h2>Skills</h2>\n            <ul>\n              <li>MERN</li>\n              <li>AWS architecture</li>\n              <li>Agile</li>\n            </ul>\n          </div>\n          <div className=\"education\">\n            <h2>Education</h2>\n            <p>Boston College</p>\n            <p>Computer Science, 2014</p>\n          </div>\n        </div>\n        <div className=\"column right-column\">\n          <div className=\"experience\">\n            <h2>Experience</h2>\n            <p>Senior Software Engineer, U.S. Consumer Markets, Marketing, Digital & Distribution, Direct Sales, Oct '19 - Present</p>\n            <ul>\n              <li>Developed and supported the auto sales applications for Liberty Mutual</li>\n              <li>Created an API via AWS CDK to support state-specific requirements</li>\n            </ul>\n            <p>Senior Software Developer, U.S. Consumer Markets, Marketing, Digital & Distribution, Direct Claims, Oct '17 - Oct '19</p>\n            <ul>\n              <li>Developed and supported the claim filing applications for Liberty Mutual and Safeco</li>\n              <li>Expanded the claim filing applications beyond first-party customers</li>\n            </ul>\n            <p>Software Developer, U.S. Consumer Markets, Financial Services, Sales Compensation, Aug '16 - Sep '17</p>\n            <ul>\n              <li>Pioneered initiative within business unit to migrate legacy systems to a cloud native architecture </li>\n              <li>Documented requirements and implement application functionality accordingly</li>\n            </ul>\n            <p>Software Developer, Global Specialty, Liberty Specialty Markets, Reinsurance, Feb '16 - Jul '16</p>\n            <ul>\n              <li>Supported development of claims, underwriting, and contact management applications</li>\n              <li>Contribute to architecture, design, security, and testing of the three applications</li>\n            </ul>\n            <p>IT Analyst II, U.S. Consumer Markets, Publishing & Document Management, Feb '15 - Feb '16</p>\n            <ul>\n              <li>Led decision-making on the architecture and design of a document repository application</li>\n              <li>Mentored teammates on technical design, execution, and implementation as Technical Lead</li>\n            </ul>\n            <p>IT Analyst, Commercial Insurance, LMS, Reporting, Planning & Analytics, Jun '14 - Feb '15</p>\n            <ul>\n              <li>Attended and observed core trainings and milestone events of ongoing lean transformations</li>\n              <li>Performed user acceptance testing and produced reports on LMS reporting application</li>\n            </ul>\n            <p>Operations Intern, Community Economic Development Assistance Corporation, Jun '13 - May '14</p>\n            <ul>\n              <li>Updated and managed CEDAC's three websites, emails, and contact management system</li>\n              <li>Processed, peer-reviewed, and sent financial audit confirmations</li>\n            </ul>\n            <p>Communications & Marketing Intern, Community Boating, Inc., Jul '13 - Aug '13</p>\n            <ul>\n              <li>Designed advertisements, event invitations, and website content</li>\n              <li>Drafted and peer-reviewed biweekly emails sent via Constant Contact</li>\n            </ul>\n            <p>Undergraduate Research Assistant, Boston College, Jun '11 - Dec '11</p>\n            <ul>\n              <li>Designed course websites on Boston College's content management system for \"Japanese Cultural Icons through Modern Times\" and \"Europe in the World I\"</li>\n              <li>Managed \"China Gateway\", an informational website for Chinese history students</li>\n            </ul>\n            <p>Student Mentor, College Application Education Project, Inc., Jun '09 - Aug '09</p>\n            <ul>\n              <li>Counseled low-income high school students on the college admissions process</li>\n              <li>Researched potential sponsors and wrote letters requesting grants and/or loans</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}